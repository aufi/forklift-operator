---
- set_fact:
    reconciled: false

- block:
  - name: "Patch MTV controller CR for OLM"
    k8s:
      state: "present"
      definition: "{{ lookup('template', 'virt_controller_olm_patch.yml.j2') }}"

  - name: "Clean conditions and set Reconciling state"
    k8s_status:
      api_version: virt.konveyor.io/v1alpha1
      kind: VirtController
      name: "{{ meta.name }}"
      namespace: "{{ meta.namespace }}"
      force: true
      conditions: []
      status:
        phase: Reconciling

  #This ConfigMap contains the cluster config on Openshift 4.
  #Looking for it provides a rudimentary way to see what version we're on.
  #It also lets us generate the cluster API endpoint URL on Openshift 4.
  - name: "Obtain cluster config"
    k8s_facts:
      api_version: config.openshift.io/v1
      kind: ClusterVersion
      name: version
    register: cluster_version

  - name: "Obtain cluster infrastructure"
    k8s_facts:
      api_version: config.openshift.io/v1
      kind: Infrastructure
      name: cluster
    register: infrastructures
    ignore_errors: yes

  - when: cluster_version.resources|length > 0
    block:
    - set_fact:
        ui_cluster_api_endpoint: "{{ infrastructures.resources[0].status.apiServerURL }}"
      when:
      - infrastructures is defined
      - infrastructures.resources | length > 0
      - infrastructures.resources[0].get('status', {}).get('apiServerURL', '') != ''

  - name: "Deploy MA analytics"
    k8s:
      state : present
      definition: "{{ lookup('template', 'xavier_analytics.yml.j2' )}}"

  - name: "Obtain MA analytics route"
    k8s_facts:
      kind: Route
      namespace: "{{ meta.namespace }}"
      label_selectors: "application=xavier-analytics"
    register: route
    until: route.resources | length > 0
    delay: 10
    retries: 6

  - name: "Set MA analytics route"
    set_fact:
      ma_route: "{{ route.resources[0].spec.host }}"

  - name: "Set MA default URL"
    set_fact:
      ma_url: "http://{{ ma_svc_name }}:8080/services/rest/server/containers/instances/{{ ma_app_version }}"

  - name: "Deploy Inventory Payload"
    k8s:
      state : present
      definition: "{{ lookup('template', 'inventory_payload.yml.j2' )}}"

  - name: "Obtain Inventory Payload route"
    k8s_facts:
      kind: Route
      namespace: "{{ meta.namespace }}"
      label_selectors: "app=inventory-payload"
    register: route
    until: route.resources | length > 0
    delay: 10
    retries: 6

  - when: (route.resources|length) > 0
    block:
    - set_fact:
        inventory_payload_url: "https://{{ route.resources[0].spec.host }}"

  - name: "Set default CORS URLs"
    set_fact:
      mig_ui_cors_loopback: "//127.0.0.1(:|$)"
      mig_ui_cors_localhost: "//localhost(:|$)"

  - name: "Check if MTV UI route exists already"
    k8s_facts:
      api_version: "route.openshift.io/v1"
      kind: Route
      name: migration
      namespace: "{{ virt_namespace }}"
    register: route_status

  - name: "Set up MTV UI route"
    k8s:
      state: "present"
      definition: "{{ lookup('template', 'virt_ui_route.yml.j2') }}"
    when: (route_status.resources|length) == 0

  - name: "Obtain MTV UI route"
    k8s_facts:
      api_version: "route.openshift.io/v1"
      kind: "Route"
      namespace: "{{ virt_namespace }}"
      name: migration
    register: route
    until: route.resources | length > 0
    delay: 10
    retries: 6

  - name: "Determine MTV UI CORS URL"
    set_fact:
      mig_ui_url: "{{ route.resources[0].spec.host }}"
      mig_ui_cors_url: "(?i)//{{ route.resources[0].spec.host | regex_replace('\\.', '\\.') }}(:|\\z)"

  - name: "Configure CORS allowed origins for MTV UI install"
    set_fact:
      cors_origins:
      - "{{ mig_ui_cors_url }}"
      - "{{ mig_ui_cors_loopback }}"
      - "{{ mig_ui_cors_localhost }}"

  - name: "Setup up inventory service and route"
    k8s:
      state: present
      definition: "{{ lookup('template', 'inventory.yml.j2') }}"

  - name: "Set OAuth redirect url"
    set_fact:
      ui_oauth_redirect_url: "https://{{ mig_ui_url }}/login/callback"

  - name: "Check if MTV UI oauthclient secret exists already so we don't update it"
    k8s_facts:
      api_version: v1
      kind: OAuthClient
      name: migration
      namespace: "{{ virt_namespace }}"
    register: oauthclient_status

  - name: "Generate random secret value for oauth client"
    set_fact:
      ui_oauth_secret: "{{ 99999999 | random | to_uuid | b64encode }}"
    when: (oauthclient_status.resources|length) == 0

  - name: "Use existing secret value for oauth client"
    set_fact:
      ui_oauth_secret: "{{ oauthclient_status.resources[0].secret }}"
    when: (oauthclient_status.resources|length) > 0

  - name: "Set up MTV UI oauthclient secret"
    k8s:
      state: present
      definition: "{{ lookup('template', 'virt_ui_oauthsecret.yml.j2') }}"

  - when: cluster_version.resources|length > 0
    block:
    - name: "Retrieve apiserver config definition"
      k8s_facts:
        api_version: "config.openshift.io/v1"
        kind: "apiserver"
        name: "cluster"
      register: apiserver

    - when: apiserver.resources[0].spec.additionalCORSAllowedOrigins is not defined or
              (cors_origins | difference(apiserver.resources[0].spec.additionalCORSAllowedOrigins|default([])))|length > 0
      block:
      - name: "Write apiserver config definition for modification"
        copy:
          dest: /tmp/apiserver.yaml
          content: "{{apiserver.resources[0] | to_nice_yaml }}"

      - name: "Add CORS URL to apiserver config definition"
        yedit:
          src: /tmp/apiserver.yaml
          key: spec.additionalCORSAllowedOrigins
          append: true
          value: "{{ item }}"
        with_items: "{{ cors_origins | difference(apiserver.resources[0].spec.additionalCORSAllowedOrigins|default([])) }}"

      - name: "Update apiserver config definition on the cluster"
        k8s:
          state: present
          definition: "{{ lookup('file', '/tmp/apiserver.yaml') | from_yaml }}"

  - name: "Check if inventory route exists"
    k8s_facts:
      api_version: "route.openshift.io/v1"
      kind: Route
      name: inventory
      namespace: "{{ virt_namespace }}"
    register: inventory_route

  - when: (inventory_route.resources|length) > 0
    block:
    - set_fact:
        inventory_api_url: "https://{{inventory_route.resources[0].spec.host}}"

    - name: "Check if MTV UI configmap exists already so we don't update it"
      k8s_facts:
        api_version: v1
        kind: ConfigMap
        name: "{{ ui_configmap_name }}"
        namespace: "{{ virt_namespace }}"
      register: configmap_status

    - name: "Set up MTV UI configmap"
      k8s:
        state: present
        definition: "{{ lookup('template', 'virt_ui_configmap.yml.j2') }}"
      when: (configmap_status.resources|length) == 0

  - name: "Set up MTV controller"
    k8s:
      state : present
      definition: "{{ lookup('template', 'virt_controller.yml.j2' )}}"

  - name: "Set up MTV UI"
    k8s:
      state : present
      definition: "{{ lookup('template', 'virt_ui.yml.j2' )}}"

  - name: "Set up default Provider"
    k8s:
      state: present
      definition: "{{ lookup('template', 'provider.yml.j2') }}"

  - set_fact:
      reconciled: true

  always:
  - k8s_status:
      api_version: virt.konveyor.io/v1alpha1
      kind: VirtController
      name: "{{ meta.name }}"
      namespace: "{{ meta.namespace }}"
      status:
        phase: Reconciled
    when: reconciled

  - k8s_status:
      api_version: virt.konveyor.io/v1alpha1
      kind: VirtController
      name: "{{ meta.name }}"
      namespace: "{{ meta.namespace }}"
      status:
        phase: Failed
    when: not reconciled

  - name: Retrieve virt controller status
    k8s_facts:
      api_version: virt.konveyor.io/v1alpha1
      kind: VirtController
      namespace: "{{ virt_namespace }}"
    register: controller

  - when: controller.resources is defined and
          controller.resources[0].status.conditions is defined
    block:
    - k8s_status:
        api_version: virt.konveyor.io/v1alpha1
        kind: VirtController
        name: "{{ meta.name }}"
        namespace: "{{ meta.namespace }}"
        status:
          phase: Failed
      when: item.type == 'Critical'
      with_items: "{{ controller.resources[0].status.conditions }}"
